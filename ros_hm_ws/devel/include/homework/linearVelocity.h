// Generated by gencpp from file homework/linearVelocity.msg
// DO NOT EDIT!


#ifndef HOMEWORK_MESSAGE_LINEARVELOCITY_H
#define HOMEWORK_MESSAGE_LINEARVELOCITY_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace homework
{
template <class ContainerAllocator>
struct linearVelocity_
{
  typedef linearVelocity_<ContainerAllocator> Type;

  linearVelocity_()
    : linear(0.0)  {
    }
  linearVelocity_(const ContainerAllocator& _alloc)
    : linear(0.0)  {
  (void)_alloc;
    }



   typedef float _linear_type;
  _linear_type linear;





  typedef boost::shared_ptr< ::homework::linearVelocity_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::homework::linearVelocity_<ContainerAllocator> const> ConstPtr;

}; // struct linearVelocity_

typedef ::homework::linearVelocity_<std::allocator<void> > linearVelocity;

typedef boost::shared_ptr< ::homework::linearVelocity > linearVelocityPtr;
typedef boost::shared_ptr< ::homework::linearVelocity const> linearVelocityConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::homework::linearVelocity_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::homework::linearVelocity_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::homework::linearVelocity_<ContainerAllocator1> & lhs, const ::homework::linearVelocity_<ContainerAllocator2> & rhs)
{
  return lhs.linear == rhs.linear;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::homework::linearVelocity_<ContainerAllocator1> & lhs, const ::homework::linearVelocity_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace homework

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::homework::linearVelocity_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::homework::linearVelocity_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::homework::linearVelocity_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::homework::linearVelocity_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::homework::linearVelocity_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::homework::linearVelocity_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::homework::linearVelocity_<ContainerAllocator> >
{
  static const char* value()
  {
    return "aeedbad760b28cbccafc1668ae4ed22c";
  }

  static const char* value(const ::homework::linearVelocity_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xaeedbad760b28cbcULL;
  static const uint64_t static_value2 = 0xcafc1668ae4ed22cULL;
};

template<class ContainerAllocator>
struct DataType< ::homework::linearVelocity_<ContainerAllocator> >
{
  static const char* value()
  {
    return "homework/linearVelocity";
  }

  static const char* value(const ::homework::linearVelocity_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::homework::linearVelocity_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 linear\n"
;
  }

  static const char* value(const ::homework::linearVelocity_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::homework::linearVelocity_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.linear);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct linearVelocity_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::homework::linearVelocity_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::homework::linearVelocity_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "linear: ";
    Printer<float>::stream(s, indent + "  ", v.linear);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HOMEWORK_MESSAGE_LINEARVELOCITY_H
